{"version":3,"sources":["libs/tsc.ts"],"names":[],"mappings":"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","file":"../../libs/tsc.js","sourcesContent":["import { CoreLib } from './base';\nimport { SrcOptions, DestOptions } from 'vinyl-fs';\nimport { src, dest } from 'gulp';\nimport { Project, createProject } from 'gulp-typescript';\nimport { init } from 'gulp-sourcemaps';\nimport { join } from 'path';\n\nexport interface TSCConfiguration {\n    sourcemaps?: NodeJS.ReadWriteStream;\n    typescript?: Project;\n    declaration?: string | boolean;\n}\n\nexport class TSC extends CoreLib {\n\n    public destOpt: any;\n    public opt?: DestOptions;\n    public configuration?: TSCConfiguration;\n\n    constructor() {\n        super();\n        this.destOpt = join(process.cwd(), 'dist');\n    }\n\n    public config(configuration: TSCConfiguration) {\n        this.configuration = configuration;\n        return this;\n    }\n\n    public src(globs: string | string[], opt?: SrcOptions) {\n        this.gulp = src(globs, opt);\n        return this;\n    }\n\n    public dest(folder: string | ((file: File) => string), opt?: DestOptions) {\n        this.destOpt = folder;\n        this.opt = opt;\n        return this;\n    }\n\n    public async run() {\n        if (!this.configuration) { throw new Error('don\\'t init configuration pleace apply .config(configuration: TSCConfiguration) .'); }\n        let { sourcemaps, typescript, declaration } = this.configuration;\n        if (sourcemaps) { this.gulp = this.gulp.pipe(init()); }\n        if (!typescript) { typescript = createProject(join(process.cwd(), 'tsconfig.json')); }\n        const tsResult = this.gulp.pipe(typescript());\n        if (typeof declaration === 'boolean' && declaration === true) { declaration = this.destOpt; }\n        if (typeof declaration === 'string') {\n            return await Promise.all([\n                new Promise(r => tsResult.dts.pipe(dest(declaration as string, this.opt)).on('end', r)),\n                new Promise(r => {\n                    if (sourcemaps) { return tsResult.js.pipe(sourcemaps).pipe(dest(this.destOpt, this.opt)).on('end', r); }\n                    return tsResult.js.pipe(dest(this.destOpt, this.opt)).on('end', r);\n                }),\n            ]);\n        } else {\n            return new Promise(r => {\n                if (sourcemaps) { return tsResult.js.pipe(sourcemaps).pipe(dest(this.destOpt, this.opt)).on('end', r); }\n                return tsResult.js.pipe(dest(this.destOpt, this.opt)).on('end', r);\n            });\n        }\n    }\n}\n\nexport * from 'gulp-sourcemaps';\nexport { Project, createProject } from 'gulp-typescript';\n"]}