{"version":3,"sources":["decorators/task.ts"],"names":[],"mappings":";;;AACA,kCAAoD;AACpD,yCAAkD;AAIlD,SAAgB,IAAI,CAAC,KAAmB,EAAE,GAAY,EAAE,KAAoC;IACxF,IAAI,KAAK,YAAY,WAAI,IAAI,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,EAAE,KAAK,WAAI,IAAI,GAAG,IAAI,KAAK,EAAE;QAChF,MAAM,KAAK,GAAa,OAAO,CAAC,WAAW,CAAC,gBAAQ,EAAE,KAAK,EAAE,gBAAQ,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC;QACxF,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAChB,OAAO,CAAC,cAAc,CAAC,gBAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,gBAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;QAEpE,OAAO,CAAC,cAAc,CAAC,eAAO,EAAE;YAC5B,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,CAAC,KAAK;YAC/C,MAAM,EAAE,EAAE;SACG,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;KAClC;IACD,OAAO,CAAC,MAAY,EAAE,MAAc,EAAE,EAAgC,EAAE,EAAE;QACtE,MAAM,KAAK,GAAa,OAAO,CAAC,WAAW,CAAC,gBAAQ,EAAE,MAAM,EAAE,gBAAQ,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC;QACzF,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACnB,OAAO,CAAC,cAAc,CAAC,gBAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,gBAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;QAErE,OAAO,CAAC,cAAc,CAAC,eAAO,EAAE;YAC5B,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK;SAClC,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IACvC,CAAC,CAAA;AACL,CAAC;AApBD,oBAoBC","file":"../../decorators/task.js","sourcesContent":["import Undertaker from 'undertaker';\nimport { Core, ITask, ITaskOptions } from '../core';\nimport { TASKKEY, TASKSKEY } from '../core/types';\n\nexport function Task(options: ITask): (target: Core, key: string, descr: TypedPropertyDescriptor<any>) => any;\nexport function Task(target: Core, key: string, descr: TypedPropertyDescriptor<any>): any;\nexport function Task(props: ITask | Core, key?: string, descr?: TypedPropertyDescriptor<any>) {\n    if (props instanceof Core && props._root && props._root() === Core && key && descr) {\n        const tasks: string[] = Reflect.getMetadata(TASKSKEY, props, TASKSKEY.toString()) || [];\n        tasks.push(key);\n        Reflect.defineMetadata(TASKSKEY, tasks, props, TASKSKEY.toString());\n\n        Reflect.defineMetadata(TASKKEY, {\n            target: props, method: key, action: descr.value,\n            config: {},\n        } as ITaskOptions, props, key);\n    }\n    return (target: Core, method: string, dr: TypedPropertyDescriptor<any>) => {\n        const tasks: string[] = Reflect.getMetadata(TASKSKEY, target, TASKSKEY.toString()) || [];\n        tasks.push(method);\n        Reflect.defineMetadata(TASKSKEY, tasks, target, TASKSKEY.toString());\n\n        Reflect.defineMetadata(TASKKEY, { \n            target, method, action: dr.value, config: props \n        } as ITaskOptions, target, method);\n    }\n}"]}